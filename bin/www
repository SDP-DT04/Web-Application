#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../server');
var debug = require('debug')('Web-Application:server');
var http = require('http');
var xbee = require('../lib/xbee.js');
var db = require('../lib/database.js');
var calc = require('../lib/data-processor');
var path = require('path');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server); //Needed for communication between server and client

var fs = require('fs');

//var data = fs.readFileSync(path.join(__dirname, '../test.txt'), 'utf-8');
//var accel = data.split(',');
//accel = accel.map(function(s) {return Number(s)});
//console.log(accel);

//calc.process_dataset(accel);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

xbee.start(); //Opens and starts XBEE communication

io.on('connection', function (socket) { //Opens communication channel to the front end
    socket.emit('connection', {hello: 'connected'}); //Sends a message to the front end
    socket.on('make chart', function (data) { //receives a message from the front end to create a graph
        //console.log('making chart');
        //console.log(data.name);
        //console.log(data.date);
        db.recent_workouts.findOne({$and : [{'dateString': data.date.toString()}, {'swimmer': data.name.toString()}]}, function(err, workout) {
            if(!err) {
                //console.log(workout.tot_time);
                //console.log(workout.coefficients);

                //makes a call to the external function to recreate the position data
                var result = create_position.expand_postion(0, workout.acc_time, 0.5, workout.coefficients);
                if (workout.tot_time - workout.acc_time > 0.5) {
                    result.position.push(result.position(result.position.length()));
                    result.time.push(result.time(result.time.length())+0.5);
                }
                //console.log('position ' + result.position);
                //console.log('time ' + result.time);
                socket.emit('position', {result: result});
            }
            else {
                console.log('error')
                console.log(err);
            }
        });
    });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
